[2025-09-10 00:00 UTC] Frontend: Improved patient selection in `frontend/src/components/appointments/AppointmentScheduler.tsx` by storing `selectedPatientId` explicitly, clearing it on input change, and using it when booking to prevent failures after selecting a patient. 
[2025-09-10 00:05 UTC] Backend: Relaxed past-date validation in `backend/src/modules/appointments/appointments.service.ts` to compare the slot start time on the given date against `now`, enabling same-day future bookings (fixes booking for patients like Arjun Desai). 
[2025-09-10 00:18 UTC] Backend: Restored `appointments.service.ts` to HEAD and applied minimal edits: (1) validate using slot start time vs now for past-check, (2) filter out past slots on current day in `getAvailableSlots`. Aims to fix booking failure for patient Arjun Desai. 
[2025-09-10 00:22 UTC] Frontend: Enhanced `AppointmentScheduler` to (1) display already booked slots, (2) fetch and map doctor schedule for slot->appointment details, (3) show a dialog with booking/patient details after booking or when clicking a booked slot. 
[2025-09-10 00:28 UTC] Frontend: Improved visual feedback in `AppointmentScheduler` — added selected patient badge with clear button, success banner after booking, and inline loading state on slot buttons while booking. 
[2025-09-10 00:34 UTC] Frontend: AppointmentScheduler now highlights the newly booked slot with a green shade and disables/grays out past slots to prevent clicks. 
[2025-09-10 00:41 UTC] Frontend: Implemented optimistic UI for appointment booking in `AppointmentScheduler` with instant slot state updates, green highlight for the newly booked slot, and stronger gray/disabled styling for past slots. 
[2025-09-10 00:45 UTC] Frontend: Enhanced `AppointmentScheduler` with stronger visual styling — newly booked slots are bright green, past slots are clearly grayed out, booking states show yellow, and success messages auto-clear after 5 seconds with improved design. 
[2025-09-10 00:50 UTC] Frontend: Replaced Tailwind color classes with inline styles in `AppointmentScheduler` to ensure visual styling works correctly with Tailwind v4 — bright green for new bookings, blue for booked slots, gray for past slots. 
[2025-09-10 00:55 UTC] Frontend: Enhanced Calendar view (`AppointmentsCalendar` and `DoctorDayCalendar`) with same visual styling as Slots view — green for newly booked, blue for existing, gray for past slots, patient selection badges, success feedback, and clickable appointment details.
[2025-09-10 01:00 UTC] Frontend: Added room information and appointment type filtering to both Calendar and Slots views — displays room names, visit type badges (OPD/Procedure/Telemedicine), filtering dropdowns, and enhanced appointment details with room and type information.
[2025-09-10 01:15 UTC] Backend: Added `/appointments/rooms` endpoint to fetch all active rooms for appointment booking.
[2025-09-10 01:20 UTC] Frontend: Created comprehensive `AppointmentBookingDialog` component that prompts for appointment type (OPD/Procedure/Telemedicine) and shows real-time room availability with conflict detection. Procedure bookings require room selection, and the dialog shows which rooms are occupied and by whom.
[2025-09-10 01:30 UTC] Backend: Added complete room management system with endpoints for creating, updating, deleting, and fetching rooms (`/appointments/rooms`, `/appointments/rooms/all`, etc.).
[2025-09-10 01:35 UTC] Frontend: Created `RoomsManagement` component with full CRUD operations, room statistics dashboard, and comprehensive room type support (Consultation, Procedure, Operation, Telemedicine, Emergency, Recovery, etc.). Added rooms page to dashboard navigation. 
[2025-09-10 01:40 UTC] Frontend: Implemented comprehensive global search functionality in header — searches across patients, appointments, and users with real-time dropdown results, debounced queries, keyboard navigation, and smart routing to relevant pages.
[2025-09-10 02:15 UTC] Frontend: Enhanced medical visit documentation with role-based form sections (Therapist 20-25%, Nurse 40%, Doctor 100%), integrated camera photo capture, visit numbering system, patient history timeline view, section completion tracking, and progressive form workflow. Backend already supports patient history API and photo uploads.
[2025-09-10 02:30 UTC] Backend: Added room mock data - 2 Consultation Rooms (capacity 2-3), 3 Procedure Rooms (capacity 2-4), 1 Telemedicine Suite (capacity 1). Total 6 rooms created via add-rooms script.
[2025-09-10 02:45 UTC] Frontend: Created comprehensive room calendar view with hourly time slots (8 AM - 8 PM), room occupancy visualization, appointment details display, room type filtering, date navigation, real-time availability status, and integrated room statistics dashboard. Added tabbed interface to rooms page for calendar view and management view.
[2025-09-10 03:00 UTC] Frontend: Fixed RoomCalendar runtime error - backend returns `{ rooms: [...] }` but frontend expected rooms array directly. Added defensive programming with Array.isArray checks and proper response parsing to extract rooms from API response object.
[2025-09-10 03:15 UTC] Frontend: Fixed inventory page showing empty data - backend returns `{ items: [...], pagination: {...} }` but frontend was looking for `response.data`. Updated frontend to extract items from correct response structure and added comprehensive debugging logs.
[2025-09-10 03:30 UTC] Backend: Fixed inventory data not showing due to branch isolation - inventory items were seeded to `branch-seed-1` but user was logged into `test-branch-1`. Moved 79 inventory items to correct branch. API now returns 20 items per page with proper pagination. 
[2025-09-10 07:00 UTC] Frontend: Enhanced patient selection UI to display both Patient ID and Patient Name for better disambiguation - updated visits page dropdown and appointment scheduler search results to show patient ID, phone, and email in structured format with improved visual hierarchy.
[2025-09-10 07:30 UTC] Frontend: Fixed patient name display issue - database uses single `name` field instead of `firstName`/`lastName`. Updated all patient selection components (visits page, appointment scheduler) to use correct `patient.name` field with fallback display logic and added debugging for API response structure verification.

[2025-09-10 08:00 UTC] Database: Added comprehensive patient visit history mock data to seed.ts script - created 5 realistic dermatology visits with detailed complaints, diagnoses, treatments, and follow-up information aligned with existing patient and doctor records.

[2025-09-10 08:15 UTC] Backend: Integrated patient visit history API endpoint `/visits/patient/:patientId/history` into frontend API client with proper authentication headers and query parameter support for pagination.

[2025-09-10 08:30 UTC] Frontend: Implemented PatientHistoryTimeline component with chronological timeline visualization showing visit dates, doctor information, chief complaints, diagnoses, treatments, and notes. Added patient history tab to visits page that's always accessible when a patient is selected, fetching real data from the database API endpoint.

[2025-09-10 08:45 UTC] Frontend: Fixed JSON parsing issue in PatientHistoryTimeline component - API returns some fields (complaints, diagnosis) as already-parsed arrays while others (scribeJson, plan, vitals) are JSON strings. Updated parsing logic to handle both cases correctly to prevent runtime errors.

[2025-09-10 09:15 UTC] Backend: Fixed critical Prisma validation errors in reports service - Payment model doesn't have branchId field, must filter through invoice relationship. Updated payment queries to use `invoice: { branchId }` instead of direct `branchId`. Fixed field name mismatches: used 'reconStatus' instead of 'status' and 'mode' instead of 'method' to match actual Payment model schema. Cleared frontend .next cache and restarted both servers to resolve internal server errors. 

[2025-09-10 09:25 UTC] Backend: Visits history endpoint hardened — coerce `limit` to number, enforce branch scoping via `patient.branchId`; verified 5 seeded visits for Rajesh.

[2025-09-10 09:28 UTC] Frontend: API client now uses standard `get()` for `/visits/patient/:id/history`, ensuring auth headers and proxy; removed ad-hoc fetch.

[2025-09-10 09:32 UTC] Frontend: Fixed React runtime error in PatientHistoryTimeline by rendering `treatment.medications` as a list (supports string or {name,dosage,duration}). 

[2025-09-10 23:20 UTC] Backend: Added protected GET /auth/me returning { id, role, branchId } from JWT; restarted server and verified endpoint.
[2025-09-10 23:20 UTC] Frontend: Visits page now calls /auth/me successfully (fixes "Cannot GET /auth/me" error during initial load). 
[2025-09-11 12:45 UTC] Diagnosis: Rooms calendar view not linked to bookings due to data shape mismatch. `frontend/src/components/rooms/RoomCalendar.tsx` expects room schedule appointments with `startTime`/`endTime` and derives occupancy by hour, but backend `getRoomSchedule` returns only `slot` (e.g., "10:00-10:30"). As a result, `getAppointmentForTimeSlot()` never matches and the calendar shows rooms as available. Also noted minor inconsistencies: visitType labels ('PROCEDURE' vs 'Procedure') and room type strings ('Telemed' vs 'Telemedicine') affecting badges/filters only. Suggested fix: parse `slot` on the frontend or have backend include `startTime`/`endTime` fields; align enums/labels for consistency. 
[2025-09-11 12:52 UTC] Frontend: Connected rooms calendar to bookings by switching to slot-based matching in `frontend/src/components/rooms/RoomCalendar.tsx`. Replaced expected `startTime`/`endTime` with `slot` from backend `getRoomSchedule`, added overlap logic per hour cell, normalized visit type colors (OPD/PROCEDURE/TELEMED), and display slot string. Calendar now correctly shows occupied vs available by room and hour. 
[2025-09-11 13:05 UTC] Frontend: Added visit-linked `PrescriptionBuilder` with drug search, templates, multi-language, validity/refills, and rich item controls; integrated as a new "Prescription" tab in `frontend/src/components/visits/MedicalVisitForm.tsx`. Extended `frontend/src/lib/api.ts` with prescriptions endpoints (create, searchDrugs, templates). 
[2025-09-11 13:12 UTC] Frontend: Fixed `PrescriptionBuilder` rendering by marking it as a client component (`'use client'`), ensuring it mounts inside `MedicalVisitForm` tabs. 
[2025-09-11 13:16 UTC] Frontend: Enabled Prescription tab for ADMIN/OWNER by adding roles with 'all' permissions in `frontend/src/components/visits/MedicalVisitForm.tsx`. 
[2025-09-11 13:28 UTC] Frontend: Enhanced `PrescriptionBuilder` with visit-aware section toggles (header/diagnosis/medications/procedures/counseling/vitals/follow-up/notes/signature), custom sections add/remove, and a print preview dialog with clean A4 layout and print CSS. Auto-seeds fields from visit details. 
[2025-09-11 13:40 UTC] Backend: Added `Drug` model (India-focused) to Prisma schema; implemented POST `/prescriptions/drugs/import` for bulk ingestion and GET `/prescriptions/drugs/autocomplete` for fast UI search; service methods `importDrugs` and `autocompleteDrugs` query the new table. Frontend wired `PrescriptionBuilder` search to `/drugs/autocomplete`. 
[2025-09-11 13:55 UTC] Frontend/Backend: Extended prescription DTO and builder with dermatology fields (site, amount/FTU, day-part, leave-on/wash-off, steroid taper, isotretinoin mg/kg, warnings, food/pulse regimens) and a Procedure Metrics editor; included in payload and print preview. Data posts to backend and persists with prescription record metadata. 
[2025-09-12 17:55 UTC] Frontend: Prescription print preview now renders every selected section with headers and spacing even when empty (shows —). Normalized visit JSON (plan/vitals) for reliable rendering and used visitPlan/visitVitals in preview. Ensures Procedures, Counseling, Vitals, Follow-up, Notes all appear when toggled. 
[2025-09-12 18:05 UTC] Backend: Fixed revenue report queries to use relation filter `invoice: { is: { ... } }` and corrected payment breakdown key (`mode`). Added guard in `findAllPrescriptionTemplates` to return empty results if the Prisma model is missing, preventing 500s. 
[2025-09-12 18:12 UTC] Backend/Frontend: Fixed payments report Prisma invoice relation filter and corrected payment mode mapping; improved frontend ApiClient error handling to gracefully parse non-JSON error bodies (falls back to text) to avoid misleading Internal server error surfaces. 
[2025-09-14 11:52 UTC] Frontend/Backend: Patients filters aligned with seed data — backend gender filter case-insensitive; frontend sends M/F/O and normalizes display/filtering to MALE/FEMALE/OTHER with UNKNOWN fallback. 
[2025-09-14 12:00 UTC] Frontend: Visits setup now uses patient autocomplete with debounce, querying `/patients?search=` and selecting sets `selectedPatientId` (replaces static dropdown). 
[2025-09-14 12:05 UTC] Frontend: New Invoice form now has patient autocomplete (searches `/patients?search=`) and stores selected `patientId`. 
[2025-09-14 12:20 UTC] Frontend: PrescriptionBuilder now shows inline UI feedback for sections that will be auto-included in preview. Chief Complaints, Histories, Family History, Topicals, Post Procedure, Investigations, Procedure Planned, and Procedure Parameters get a subtle green highlight with an “Auto-included in preview” note when their fields are filled. Preview already renders these sections automatically when content is present. 
[2025-09-14 12:55 UTC] Frontend: Prescription print preview supports a background image with configurable top margin. Default set to `/letterhead.png`. Use public assets (frontend/public) and reference as `/letterhead.png`. 
[2025-09-14 13:32 UTC] Backend/Frontend: Scaffolding for 1MG integration added. Backend module `pharmacy/one-mg` with proxy endpoints (search, product, check-inventory, orders, webhooks). Frontend: added "Order via 1MG" entry point in PrescriptionBuilder with a mapping dialog placeholder; API client methods added. 
[2025-09-14 17:40 UTC] Frontend: Set default print preview top margin to 150px in PrescriptionBuilder. 
[2025-09-14 17:45 UTC] Frontend: Renamed prescription date label from "Valid Until" to "Review Date" in PrescriptionBuilder. 
[2025-09-14 17:35] VisitPhotos: Preview shows full image with object-contain in a fixed-height box; added dedicated iPhone camera capture input (capture=environment) and buttons for "Upload from device" and "Take photo". Cleans input values after upload. PrescriptionBuilder: Seed vitals from visit data on load and fallback to visit vitals in print preview (auto BMI computation). 
[2025-09-14 18:05] Patients: Added referralSource (Instagram/Twitter/Google/Doctor/Friends & Family/Other) to DB schema and API; create/edit form now captures it. Added PATCH /patients/:id. 2025-09-15T09:11:21Z Started backend (4000) and frontend dev (3000/3001) after clean reset.

[2025-09-15 14:45 UTC] Backend: Seed script now creates sample Services and coherent Invoices linked to seeded Visits and the same patient, with Payments (cash full, UPI partial, card full). Added `invoicesCreated` to seed summary.

[2025-09-15 14:52 UTC] Backend: Executed seed to create 3 coherent invoices linked to recent visits (cash full, UPI partial, card full) with payments recorded. Verify via GET /billing/invoices or search invoiceNo starting with 'INV-SEED-'.

[2025-09-15 15:05 UTC] Backend: Extended Patient schema with demographics (secondaryPhone, maritalStatus, bloodGroup, occupation, guardianName, medicalHistory JSON) and added one-to-one link to User via portalUserId. Added endpoints: POST /patients/:id/link-user, POST /patients/:id/unlink-user, GET /patients/:id/portal-user. Updated PatientsModule to import UsersModule and service logic to link/unlink or create PATIENT-role users. Updated planning.md accordingly.

[2025-09-15 15:08 UTC] Repo: Pushed patients demographics + portal user link commit to origin/main.

[2025-09-15 18:45 UTC] Frontend: Print Preview now reliably shows patient name/ID/gender/DOB. Added fallback fetch of `/patients/:id` in `frontend/src/components/visits/PrescriptionBuilder.tsx` when visit payload lacks patient info or `visitId` is null; preview renders from `visitData.patient` or `patientData`.

[2025-09-15 19:05 UTC] Backend: Fixed 500s from password/reset endpoints by aligning to Prisma schema — use `User.password` (hashed) vs passwordHash, and `User.resetToken/resetTokenExpiry` instead of missing PasswordResetToken model. Adjusted role/permission handlers to match current schema. Rebuilt successfully.

## 2024-12-19 - Doctor Calendar Booking UX Improvements

### Fixed Calendar Booking Issues
- **Fixed slot highlighting without card transformation**: Added refreshKey mechanism to trigger immediate calendar data refresh after successful booking
- **Added booking in progress feedback**: Slots now show yellow/amber color and "Booking..." text while appointment is being created
- **Improved visual feedback**: Added proper loading states and transitions for better user experience
- **Enhanced auto-reload**: Ensured frontend dev server uses optimal settings with --turbopack and explicit port

### Changes Made:
1. **DoctorDayCalendar.tsx**:
   - Added `refreshKey` prop to trigger data reload
   - Added `bookingInProgress` prop for immediate visual feedback
   - Converted fetch logic to useCallback for better dependency management
   - Added booking progress visual states (yellow/amber colors)
   - Improved button states and disabled logic during booking

2. **AppointmentsCalendar.tsx**:
   - Added `refreshKey` state that increments after successful booking
   - Passed booking progress state to calendar component
   - Improved booking flow with immediate calendar refresh

3. **package.json**:
   - Updated dev script to explicitly use port 3000 with turbopack
   - Ensured optimal development experience with fast refresh

### Technical Improvements:
- Booking now triggers immediate calendar refresh (no more manual refresh needed)
- Visual feedback shows booking progress with color changes
- Better state management with useCallback and proper dependencies
- Snappy UI updates with proper loading states

### User Experience:
- Slots immediately show booking progress when clicked
- Calendar updates instantly after successful booking
- Clear visual feedback throughout the booking process
- No more waiting for manual refresh to see booked appointments

## 2024-12-19 - Optimistic Updates Implementation

### Fixed Remaining Refresh Issues
- **Problem**: Calendar still required refresh after booking despite previous fixes
- **Root Cause**: Calendar was only updating after server response, not immediately
- **Solution**: Implemented optimistic updates that show appointment immediately when booking starts

### Changes Made:
1. **DoctorDayCalendar.tsx**:
   - Added `optimisticAppointment` prop to display appointments before server confirmation
   - Updated `filteredSchedule` logic to include optimistic appointments
   - Optimistic appointments are filtered and displayed just like real ones

2. **AppointmentsCalendar.tsx**:
   - Added `optimisticAppointment` state for immediate display
   - Create optimistic appointment object immediately when booking starts
   - Clear optimistic appointment when real data arrives or on error
   - Updated version to v2.2

### Technical Implementation:
- Optimistic appointment is created with patient name, visit type, and room info
- Appointment appears immediately in calendar while API call is in progress  
- Real server data replaces optimistic data after successful booking
- Optimistic data is cleared on error to prevent inconsistent state
- Filters work correctly with optimistic appointments

### Result:
- **INSTANT** appointment display - no more refresh needed
- Smooth user experience with immediate visual feedback
- Fallback handling for errors maintains data consistency

## 2024-12-19 - Appointment Management & Visit Integration

### Added Appointment Cancellation
- **Cancel Button**: Added cancel (X) button to appointment cards in calendar
- **Confirmation Dialog**: Two-step confirmation process to prevent accidental cancellations
- **API Integration**: Added `deleteAppointment` method to API client
- **Optimistic Updates**: Calendar refreshes immediately after cancellation
- **Error Handling**: Proper error messages and fallback handling

### Added Appointment-to-Visit Navigation
- **Visit Button**: Added "Visit" button to appointment cards for direct navigation
- **URL Parameters**: Visit page accepts `patientId`, `appointmentId`, and `autoStart` parameters
- **Auto-Selection**: Automatically selects patient and doctor from appointment data
- **Auto-Start**: Can automatically start visit documentation when `autoStart=true`
- **Visual Indicators**: Clear badges and breadcrumbs showing appointment linkage

### Enhanced Appointment Cards
- **Action Buttons**: Clean mini-buttons for Visit and Cancel actions
- **Better Layout**: Improved card layout with proper spacing for actions
- **Click Handling**: Separate click handlers for card details vs. action buttons
- **Visual Feedback**: Hover states and proper button styling

### Enhanced Visit Documentation
- **Appointment Integration**: Visit form accepts and displays appointment data
- **Visual Indicators**: "Linked to Appointment" badge when created from appointment
- **Navigation**: "Back to Calendar" button when coming from appointment
- **Data Linking**: Automatically includes `appointmentId` in visit creation payload

### Changes Made:
1. **API Client** (`lib/api.ts`):
   - Added `getAppointment`, `updateAppointment`, `deleteAppointment` methods

2. **DoctorDayCalendar** (`components/appointments/DoctorDayCalendar.tsx`):
   - Added cancel and visit navigation functionality
   - Added confirmation dialog for appointment cancellation
   - Enhanced appointment card layout with action buttons
   - Added proper error handling and refresh callbacks

3. **AppointmentsCalendar** (`components/appointments/AppointmentsCalendar.tsx`):
   - Added callback for appointment updates to trigger refresh
   - Updated to version 2.3

4. **Visits Page** (`app/dashboard/visits/page.tsx`):
   - Added URL parameter handling for appointment linking
   - Auto-selects patient/doctor from appointment data
   - Added visual indicators for appointment-linked visits
   - Enhanced navigation with back-to-calendar option

5. **MedicalVisitForm** (`components/visits/MedicalVisitForm.tsx`):
   - Added `appointmentId` and `appointmentData` props
   - Includes appointment ID in visit creation payload
   - Added visual indicator when linked to appointment

### User Experience:
- **One-click cancellation**: Click X → Confirm → Done (with immediate calendar update)
- **Seamless visit creation**: Click "Visit" on appointment → Auto-navigate to visit documentation
- **Clear visual feedback**: Badges and indicators show appointment relationships
- **Proper navigation**: Back buttons and breadcrumbs for easy navigation
- **Error prevention**: Confirmation dialogs prevent accidental actions

[2025-09-19 21:45 UTC] Backend/Frontend: Added ability to generate sample dermatology invoices for existing patients only. Backend: POST /billing/invoices/generate-samples creates backdated invoices using predefined dermatology offers/packages and randomizes payments (full/partial/none), strictly reusing patients in DB and scoping by branch. Frontend: Billing page gained "Generate sample invoices" button and invoice table now reads backend fields (invoiceNo, total/received/balance, patient.name) and status derived from balance/received. 

[2025-09-19 22:15 UTC] Frontend: Enhanced billing system with smart dermatology packages and advanced invoice builder. Added 4 comprehensive treatment packages (Acne Complete ₹8K, Laser Hair Removal ₹12K, Anti-Aging Premium ₹15K, Pigmentation ₹10K) and 24 individual services across 8 categories. Implemented dual-tab interface: Simple Invoice for single services, Invoice Builder for multi-item professional invoicing with real-time calculations, item-level discounts, overall discounts, GST calculations, and invoice notes. Packages auto-expand into constituent services for detailed billing transparency.

[2025-09-19 22:30 UTC] Frontend: Fixed invoice builder creation validation bug (was checking invoiceItems.length === 0 twice incorrectly) by adding proper activeTab state management and conditional validation. Added comprehensive print functionality with professional invoice template featuring custom clinic header, gradient branding, complete business info (GSTIN, license), itemized service breakdown, tax calculations, and print-optimized CSS. New invoices automatically show print preview, and existing invoices have print buttons in the table. Print template includes patient details, invoice metadata, financial summary with discounts/GST, and professional footer. 

## 2025-09-19 - Connection Issues Resolved and Data Populated

### Issues Fixed:
1. **Port Conflicts**: Resolved EADDRINUSE errors on port 4000 by killing conflicting processes
2. **Database Migration**: Fixed missing database tables by running `npx prisma migrate reset --force`
3. **Seed Data**: Successfully populated database with fresh-seed.ts script
4. **Authentication**: Confirmed API authentication is working with JWT tokens

### Current Status:
✅ **Backend**: Running on port 4000 with autoreload
✅ **Frontend**: Running on port 3000 with API proxy to backend  
✅ **Database**: PostgreSQL connected with complete seed data
✅ **Authentication**: JWT-based auth working (login with phone/password)

### Available Data:
- **4 Users**: 1 Admin (9000000000), 2 Doctors (Shravya: 9000000001, Praneeta: 9000000002), 1 Receptionist (9000000003)
- **6 Rooms**: 2 Consultation, 3 Procedure, 1 Telemedicine
- **10 [TEST] Patients**: All with dermatology-focused data and full contact details
- **7 Sample Invoices**: Generated with past dates, various dermatology services, some paid/unpaid
- **3 Services**: Dermatology Consultation, Acne Treatment, Skin Analysis

### Login Credentials:
- **Admin**: Phone: 9000000000, Password: password123
- **Dr. Shravya**: Phone: 9000000001, Password: password123  
- **Dr. Praneeta**: Phone: 9000000002, Password: password123
- **Receptionist**: Phone: 9000000003, Password: password123

### API Testing Results:
- Authentication: ✅ POST /api/auth/login (returns JWT token)
- Patients: ✅ GET /api/patients (10 [TEST] patients available)
- Billing: ✅ GET /api/billing/invoices (7 sample invoices with payments)
- Invoice Generation: ✅ POST /api/billing/invoices/generate-samples

### Frontend Access:
- Login: http://localhost:3000/login
- Dashboard: http://localhost:3000/dashboard (requires authentication)
- Billing: http://localhost:3000/dashboard/billing (requires authentication)

**Note**: All API endpoints require authentication. Frontend automatically redirects to login for protected routes.

### Next Steps:
1. Login to frontend using admin credentials (9000000000 / password123)
2. Test billing system with invoice builder and print functionality
3. Create appointments using the available doctors and test patients
4. Test all CRUD operations across different modules

🎉 **System is fully operational and ready for testing!** 

[2025-09-19 17:30 UTC] Frontend: Fixed room filtering issue in appointment booking - OPD/Consultation rooms weren't showing because filtering logic in `AppointmentBookingDialog.tsx` was looking for 'consultation' or 'opd' but database has room type 'Consult'. Updated filtering to include 'consult', 'consultation', and 'opd' patterns to properly match consultation rooms for OPD appointments.

[2025-09-19 17:35 UTC] Frontend: Fixed prescription builder print preview margins not applying in browser print preview - updated CSS to use proper `@page { margin: 0 }` and fixed print-specific layout by using exact A4 dimensions (`width: 210mm; height: 297mm`) in print mode instead of percentage-based sizing. Corrected letterhead display issues: restored `background-size: 210mm 297mm` to prevent image stretching, fixed weird left margin that appeared only in browser print preview by using uniform padding in print CSS. Added CSS rules to suppress browser default headers/footers and included user-friendly tip in print dialog.

[2025-09-19 17:40 UTC] Frontend: Enhanced billing error debugging by adding comprehensive console logging in `BillingManagement.tsx` createInvoice function. Added logging for error status, error body, and the exact data being sent to help identify the cause of "Internal server error" when creating invoices. Fixed variable scope issue by moving items declaration outside try-catch block.

[2025-09-19 17:55 UTC] Backend: Created new invoice tables to fix billing service 500 error. Added `NewInvoice`, `NewInvoiceItem`, and `NewPayment` models with all required fields (name, description, discount, received, etc.) to `schema.prisma`. Updated billing service to use new models instead of old incomplete ones. Added proper relations to Patient, Visit, Appointment, Branch, and Service models. Created and applied migrations `add_new_invoice_tables` and `add_received_field_to_new_invoice`. This preserves existing invoice data while enabling full billing functionality with enhanced invoice items that include names, descriptions, and discounts.

[2025-09-19 18:15 UTC] Backend: Fixed remaining billing service 500 errors by completing the migration from old to new invoice models. Updated all remaining references: `generateInvoiceNumber`, `generateInvoiceNumberForDate`, `getOutstandingInvoices`, `generateSampleInvoices`, and all payment processing methods to use `newInvoice`, `newInvoiceItem`, and `newPayment` models. Added missing required fields (`name`, `description`, `discount`, `branchId`) to sample invoice generation. Created test service to prevent service auto-creation failures. Backend compiles successfully - billing system should now work without 500 errors.

[2025-09-19 18:25 UTC] Backend/Frontend: Added comprehensive error handling and debugging to diagnose remaining invoice creation issues. Enhanced `billing.controller.ts` and `billing.service.ts` with detailed console logging for request tracking, service creation, invoice generation, and error details. Added error handling around service auto-creation and invoice database operations. Enhanced frontend error logging to capture full error objects and request data. Backend compiles successfully - detailed logs will now show exactly where invoice creation fails.

[2025-09-19 23:50 UTC] Billing: Fixed invoice print preview not showing invoice details by (1) updating backend findAllInvoices to include invoice items with name, description, qty, unitPrice, discount, gstRate, total fields, (2) adding getInvoiceById method to frontend API client, (3) updating frontend print preview to fetch full invoice details and properly map backend item structure (qty->quantity) for display, (4) enhanced InvoiceItemSummary type with missing name/description fields. Print preview now shows complete invoice details including all items, pricing, and totals.

[2025-09-20 00:00 UTC] Billing: Made GST rate editable in invoice creation forms - (1) added GST rate field to simple invoice form with default 18%, (2) added editable GST column to invoice builder with per-item GST control (0-30%), (3) updated form state and resetForm to include gstRate field, (4) enhanced invoice items table with header row showing all columns (Service, Qty, Price, Disc %, GST %, Total, Action), (5) updated print preview to show dynamic GST instead of fixed "GST (18%)" label. Users can now set custom GST rates per invoice or per item. 
