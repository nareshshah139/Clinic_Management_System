// Clinic Management System - Hyderabad, India
// Prisma schema for PostgreSQL with DPDP compliance

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  DOCTOR
  NURSE
  RECEPTION
  ACCOUNTANT
  PHARMACIST
  LAB_TECH
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum VisitType {
  OPD
  TELEMED
  PROCEDURE
}

enum PaymentMode {
  CASH
  CARD
  UPI
  BNPL
}

enum ConsentType {
  GENERAL_CARE
  PROCEDURE_SPECIFIC
  TELEMED
  DATA_PROCESSING
}

enum Language {
  EN
  TE
  HI
}

// Inventory Management Enums
enum InventoryItemType {
  MEDICINE
  EQUIPMENT
  SUPPLY
  CONSUMABLE
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum TransactionType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  TRANSFER
  EXPIRED
  DAMAGED
}

enum UnitType {
  PIECES
  BOXES
  BOTTLES
  STRIPS
  TUBES
  VIALS
  AMPOULES
  SYRINGES
  PACKS
  KITS
}

enum StockAdjustmentType {
  PHYSICAL_COUNT
  DAMAGE
  EXPIRY
  THEFT
  TRANSFER
  CORRECTION
}

enum StockMovementType {
  IN
  OUT
  TRANSFER
  ADJUSTMENT
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  CANCELLED
}

// Core Entities
model User {
  id                String     @id @default(cuid())
  firstName         String
  lastName          String
  email             String     @unique
  password          String
  phone             String?
  role              UserRole
  status            UserStatus @default(ACTIVE)
  branchId          String
  employeeId        String?
  designation       String?
  department        String?
  dateOfJoining    DateTime?
  address           String?
  city              String?
  state             String?
  pincode           String?
  emergencyContact  String?
  emergencyPhone    String?
  permissions       String?    // JSON array
  resetToken        String?
  resetTokenExpiry  DateTime?
  statusReason      String?
  isActive          Boolean    @default(true)
  metadata          String?    // JSON object
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  branch            Branch             @relation(fields: [branchId], references: [id])
  appointments      Appointment[]
  visits            Visit[]
  deviceLogs        DeviceLog[]
  stockTransactions StockTransaction[]
  purchaseOrders    PurchaseOrder[]
  stockAdjustments  StockAdjustment[]
  stockMovements    StockMovement[]
  reorderRules      ReorderRule[]
  inventoryAudits   InventoryAudit[]

  @@map("users")
}

model Branch {
  id             String  @id @default(cuid())
  name           String
  description    String?
  address        String
  city            String?
  state           String?
  pincode         String?
  phone           String?
  email           String?
  website         String?
  gstNumber       String?
  licenseNumber   String?
  isActive        Boolean @default(true)
  metadata        String? // JSON object
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  users           User[]
  patients        Patient[]
  appointments    Appointment[]
  services        Service[]
  rooms           Room[]
  inventoryItems  InventoryItem[]
  suppliers       Supplier[]
  purchaseOrders  PurchaseOrder[]
  stockAdjustments StockAdjustment[]
  stockMovements  StockMovement[]
  reorderRules    ReorderRule[]

  @@map("branches")
}

model Permission {
  id          String  @id @default(cuid())
  name        String
  description String?
  resource    String
  action      String
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permissions")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String? // JSON array
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model Room {
  id          String   @id @default(cuid())
  name        String   // e.g., "Room 1", "Consultation Room A"
  type        String   // "Consultation", "Procedure", "Waiting"
  capacity    Int      @default(1)
  isActive    Boolean  @default(true)
  branchId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  branch       Branch        @relation(fields: [branchId], references: [id])
  appointments Appointment[]

  @@map("rooms")
}

model Patient {
  id           String   @id @default(cuid())
  abhaId       String?  @unique
  name         String
  gender       String
  dob          DateTime
  phone        String
  email        String?
  address      String?
  city         String?
  state        String?
  pincode      String?
  emergencyContact String?
  allergies    String?
  photoUrl     String?
  branchId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  branch       Branch        @relation(fields: [branchId], references: [id])
  appointments Appointment[]
  visits       Visit[]
  consents     Consent[]
  invoices     Invoice[]
  deviceLogs   DeviceLog[]
  labOrders    LabOrder[]
  referrals    Referral[]

  @@map("patients")
}

model Appointment {
  id          String            @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  slot        String            // e.g., "10:00-10:30"
  status      AppointmentStatus @default(SCHEDULED)
  visitType   VisitType         @default(OPD)
  notes       String?
  source      String?           // Lead/Walk-in/WhatsApp
  branchId    String
  roomId      String?
  tokenNumber Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  patient     Patient          @relation(fields: [patientId], references: [id])
  doctor      User             @relation(fields: [doctorId], references: [id])
  branch      Branch           @relation(fields: [branchId], references: [id])
  room        Room?            @relation(fields: [roomId], references: [id])
  visit       Visit?

  @@map("appointments")
}

model Visit {
  id             String   @id @default(cuid())
  patientId      String
  doctorId       String
  appointmentId  String?  @unique
  vitals         String?  // JSON - BP, HR, Temp, etc.
  complaints     String   // JSON - Array of complaints
  history        String?  // JSON - Medical history
  exam           String?  // JSON - Physical examination
  diagnosis      String?  // JSON - ICD10 codes
  plan           String?  // JSON - Treatment plan
  followUp       DateTime?
  attachments    String?  // JSON - File references
  scribeJson     String?  // JSON - AI scribe data
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patient        Patient         @relation(fields: [patientId], references: [id])
  doctor         User            @relation(fields: [doctorId], references: [id])
  appointment    Appointment?    @relation(fields: [appointmentId], references: [id])
  prescription   Prescription?
  deviceLogs     DeviceLog[]
  labOrders      LabOrder[]
  consents       Consent[]

  @@map("visits")
}

model Prescription {
  id             String   @id @default(cuid())
  visitId        String   @unique
  language       Language @default(EN)
  items          String   // JSON - Array of medication items
  instructions   String?  // JSON - Additional instructions
  genericFirst   Boolean  @default(true)
  pharmacistNotes String?
  qrcode         String?
  signature      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  visit          Visit    @relation(fields: [visitId], references: [id])

  @@map("prescriptions")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  type        String  // Consult/Procedure/Package/Aesthetic
  taxable     Boolean @default(false)
  gstRate     Float   @default(0)
  priceMrp    Float
  priceNet    Float
  deviceId    String?
  branchId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  branch      Branch     @relation(fields: [branchId], references: [id])
  invoiceItems InvoiceItem[]

  @@map("services")
}

model Invoice {
  id           String      @id @default(cuid())
  patientId    String
  visitId      String?
  items        InvoiceItem[]
  mode         PaymentMode @default(CASH)
  gstBreakup   String?     // JSON - GST calculation details
  exemptBreakup String?    // JSON - Exempt service details
  total        Float
  received     Float       @default(0)
  balance      Float
  invoiceNo    String      @unique
  gstin        String?
  hsn          String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  patient      Patient     @relation(fields: [patientId], references: [id])
  payments     Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  serviceId String
  qty       Int     @default(1)
  unitPrice Float
  gstRate   Float   @default(0)
  total     Float

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("invoice_items")
}

model Payment {
  id          String      @id @default(cuid())
  invoiceId   String
  amount      Float
  mode        PaymentMode
  reference   String?     // UPI RRn, transaction ID
  gateway     String?     // Razorpay/Cashfree/PhonePe
  reconStatus String      @default("PENDING")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  invoice     Invoice     @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model DeviceLog {
  id            String   @id @default(cuid())
  patientId     String
  visitId       String
  deviceModel   String
  serialNo      String
  parameters    String   // JSON - fluence, spot, passes, pulsewidth
  operatorId    String
  photoRefs     String?  // JSON - Before/after image references
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patient       Patient  @relation(fields: [patientId], references: [id])
  visit         Visit    @relation(fields: [visitId], references: [id])
  operator      User     @relation(fields: [operatorId], references: [id])

  @@map("device_logs")
}

model LabOrder {
  id          String   @id @default(cuid())
  patientId   String
  visitId     String
  tests       String   // JSON - Array of test names/codes
  partner     String   // Vijaya/Apollo/Lucid
  status      String   @default("ORDERED")
  resultsRef  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient     Patient  @relation(fields: [patientId], references: [id])
  visit       Visit    @relation(fields: [visitId], references: [id])

  @@map("lab_orders")
}

model Consent {
  id           String      @id @default(cuid())
  patientId    String
  visitId      String?
  consentType  ConsentType
  language     Language    @default(EN)
  text         String
  signedAt     DateTime?
  signer       String?     // Patient name or authorized person
  method       String?     // OTP/QR
  pdfUrl       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  patient      Patient     @relation(fields: [patientId], references: [id])
  visit        Visit?      @relation(fields: [visitId], references: [id])

  @@map("consents")
}

model Referral {
  id             String   @id @default(cuid())
  patientId      String
  source         String   // Doctor/Influencer/Partner
  commissionScheme String?
  payoutStatus   String   @default("PENDING")
  amount         Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patient        Patient  @relation(fields: [patientId], references: [id])

  @@map("referrals")
}

// Inventory Management Models
model InventoryItem {
  id                  String            @id @default(cuid())
  branchId            String
  name                String
  description         String?
  genericName         String?
  brandName           String?
  type                InventoryItemType
  category            String?
  subCategory         String?
  manufacturer        String?
  supplier            String?
  barcode             String?           @unique
  sku                 String?           @unique
  costPrice           Float
  sellingPrice        Float
  mrp                 Float?
  unit                UnitType
  packSize            Int?
  packUnit            String?
  currentStock        Int               @default(0)
  minStockLevel       Int?
  maxStockLevel       Int?
  reorderLevel        Int?
  reorderQuantity     Int?
  expiryDate          DateTime?
  batchNumber         String?
  hsnCode             String?
  gstRate             Float?
  requiresPrescription Boolean          @default(false)
  isControlled        Boolean           @default(false)
  storageLocation     String?
  storageConditions   String?
  tags                String?           // JSON array
  status              InventoryStatus   @default(ACTIVE)
  stockStatus         StockStatus       @default(OUT_OF_STOCK)
  metadata            String?           // JSON object
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  branch              Branch            @relation(fields: [branchId], references: [id])
  transactions        StockTransaction[]
  stockAdjustments    StockAdjustment[]
  stockMovements      StockMovement[]
  reorderRules        ReorderRule[]
  inventoryAudits     InventoryAudit[]


  @@map("inventory_items")
}

model StockTransaction {
  id          String          @id @default(cuid())
  branchId    String
  itemId      String
  userId      String
  type        TransactionType
  quantity    Int
  unitPrice   Float
  totalAmount Float
  reference   String?
  notes       String?
  batchNumber String?
  expiryDate  DateTime?
  supplier    String?
  customer    String?
  reason      String?
  location    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  item        InventoryItem   @relation(fields: [itemId], references: [id])
  user        User            @relation(fields: [userId], references: [id])

  @@map("stock_transactions")
}

model PurchaseOrder {
  id                    String   @id @default(cuid())
  branchId              String
  userId                String
  supplier              String
  orderDate             DateTime @default(now())
  expectedDeliveryDate  DateTime?
  status                PurchaseOrderStatus @default(DRAFT)
  items                 String   // JSON array
  totalAmount           Float
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  branch                Branch   @relation(fields: [branchId], references: [id])
  user                  User     @relation(fields: [userId], references: [id])

  @@map("purchase_orders")
}

model Supplier {
  id            String   @id @default(cuid())
  branchId      String
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  pincode       String?
  gstNumber     String?
  panNumber     String?
  bankDetails   String?
  paymentTerms  String?
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  branch        Branch   @relation(fields: [branchId], references: [id])

  @@map("suppliers")
}

model StockAdjustment {
  id              String   @id @default(cuid())
  branchId        String
  itemId          String
  userId          String
  type            StockAdjustmentType
  quantity        Int
  reason          String?
  notes           String?
  metadata        String?   // JSON object
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  branch          Branch   @relation(fields: [branchId], references: [id])
  item            InventoryItem @relation(fields: [itemId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("stock_adjustments")
}

model StockMovement {
  id              String   @id @default(cuid())
  branchId        String
  itemId          String
  userId          String
  type            StockMovementType
  quantity        Int
  fromLocation    String?
  toLocation      String?
  reason          String?
  notes           String?
  metadata        String?   // JSON object
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  branch          Branch   @relation(fields: [branchId], references: [id])
  item            InventoryItem @relation(fields: [itemId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model ReorderRule {
  id              String   @id @default(cuid())
  branchId        String
  itemId          String
  userId          String
  reorderLevel    Int
  reorderQuantity Int
  isActive        Boolean  @default(true)
  metadata        String?   // JSON object
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  branch          Branch   @relation(fields: [branchId], references: [id])
  item            InventoryItem @relation(fields: [itemId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("reorder_rules")
}

model InventoryAudit {
  id              String   @id @default(cuid())
  branchId        String
  itemId          String
  auditorId       String
  auditDate       DateTime @default(now())
  physicalStock   Int
  systemStock     Int
  variance        Int
  notes           String?
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  item            InventoryItem @relation(fields: [itemId], references: [id])
  auditor         User          @relation(fields: [auditorId], references: [id])

  @@map("inventory_audits")
}

// Audit & Compliance
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // CREATE/READ/UPDATE/DELETE
  entity    String   // Table name
  entityId  String
  oldValues String?  // JSON
  newValues String?  // JSON
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}
