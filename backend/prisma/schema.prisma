generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IdempotencyRecord {
  id           String    @id @default(cuid())
  key          String
  userId       String
  resourceType String
  resourceId   String
  method       String
  statusCode   Int
  responseBody String
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@unique([key, userId, resourceType, resourceId, method])
  @@index([userId, resourceType, resourceId])
  @@map("idempotency_records")
}

model User {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  email             String             @unique
  password          String
  phone             String?
  role              UserRole
  status            UserStatus         @default(ACTIVE)
  branchId          String
  employeeId        String?
  designation       String?
  department        String?
  dateOfJoining     DateTime?
  address           String?
  city              String?
  state             String?
  pincode           String?
  emergencyContact  String?
  emergencyPhone    String?
  permissions       String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  statusReason      String?
  isActive          Boolean            @default(true)
  metadata          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  appointments      Appointment[]
  deviceLogs        DeviceLog[]
  inventoryAudits   InventoryAudit[]
  patientProfile    Patient?           @relation("PatientPortalUser")
  purchaseOrders    PurchaseOrder[]
  reorderRules      ReorderRule[]
  stockAdjustments  StockAdjustment[]
  stockMovements    StockMovement[]
  stockTransactions StockTransaction[]
  branch            Branch             @relation(fields: [branchId], references: [id])
  visits            Visit[]
  pharmacyInvoices  PharmacyInvoice[]  @relation("PharmacyInvoiceDoctor")
  createdPackages   PharmacyPackage[]  @relation("PharmacyPackageCreator")
  whatsappTemplates WhatsAppTemplate[]

  // Back-relations
  createdPrescriptionTemplates PrescriptionTemplate[]
  approvedTemplateVersions     PrescriptionTemplateVersion[]
  reviewedTemplateApprovals    TemplateVersionApproval[]
  ownedClinicAssets            ClinicAsset[]
  ownedPrinterProfiles         PrinterProfile[]
  templateUsages               TemplateUsage[]
  experimentAssignments        ExperimentAssignment[]

  @@map("users")
}

model Branch {
  id                String             @id @default(cuid())
  name              String
  description       String?
  address           String
  city              String?
  state             String?
  pincode           String?
  phone             String?
  email             String?
  website           String?
  gstNumber         String?
  licenseNumber     String?
  isActive          Boolean            @default(true)
  metadata          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  appointments      Appointment[]
  inventoryItems    InventoryItem[]
  newInvoices       NewInvoice[]
  patients          Patient[]
  purchaseOrders    PurchaseOrder[]
  reorderRules      ReorderRule[]
  rooms             Room[]
  services          Service[]
  stockAdjustments  StockAdjustment[]
  stockMovements    StockMovement[]
  suppliers         Supplier[]
  users             User[]
  drugs             Drug[]
  pharmacyInvoices  PharmacyInvoice[]
  pharmacyPackages  PharmacyPackage[]
  whatsappTemplates WhatsAppTemplate[]

  // Back-relations
  prescriptionTemplates    PrescriptionTemplate[]
  clinicAssets             ClinicAsset[]
  printerProfiles          PrinterProfile[]
  templateUsages           TemplateUsage[]
  translationMemoryEntries TranslationMemoryEntry[]
  layoutExperiments        LayoutExperiment[]

  @@map("branches")
}

model Permission {
  id          String   @id @default(cuid())
  name        String
  description String?
  resource    String
  action      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model Room {
  id           String        @id @default(cuid())
  name         String
  type         String
  capacity     Int           @default(1)
  isActive     Boolean       @default(true)
  branchId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  branch       Branch        @relation(fields: [branchId], references: [id])

  @@map("rooms")
}

model Patient {
  id               String            @id @default(cuid())
  abhaId           String?           @unique
  name             String
  gender           String
  dob              DateTime
  phone            String
  email            String?
  address          String?
  city             String?
  state            String?
  pincode          String?
  emergencyContact String?
  allergies        String?
  photoUrl         String?
  referralSource   String?
  secondaryPhone   String?
  maritalStatus    String?
  bloodGroup       String?
  occupation       String?
  guardianName     String?
  medicalHistory   String?
  portalUserId     String?           @unique
  branchId         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  appointments     Appointment[]
  consents         Consent[]
  deviceLogs       DeviceLog[]
  invoices         Invoice[]
  labOrders        LabOrder[]
  newInvoices      NewInvoice[]
  branch           Branch            @relation(fields: [branchId], references: [id])
  portalUser       User?             @relation("PatientPortalUser", fields: [portalUserId], references: [id])
  referrals        Referral[]
  visits           Visit[]
  pharmacyInvoices PharmacyInvoice[]
  draftAttachments DraftAttachment[]

  // Back-relations
  experimentAssignments ExperimentAssignment[]

  @@index([branchId])
  @@index([name])
  @@index([phone])
  @@index([gender])
  @@index([createdAt])
  @@index([branchId, name])
  @@index([branchId, phone])
  @@map("patients")
}

model Appointment {
  id          String            @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  slot        String
  status      AppointmentStatus @default(SCHEDULED)
  visitType   VisitType         @default(OPD)
  notes       String?
  source      String?
  branchId    String
  roomId      String?
  tokenNumber Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  branch      Branch            @relation(fields: [branchId], references: [id])
  doctor      User              @relation(fields: [doctorId], references: [id])
  patient     Patient           @relation(fields: [patientId], references: [id])
  room        Room?             @relation(fields: [roomId], references: [id])
  newInvoices NewInvoice[]
  visit       Visit?

  @@map("appointments")
}

model Visit {
  id               String            @id @default(cuid())
  patientId        String
  doctorId         String
  appointmentId    String?           @unique
  vitals           String?
  complaints       String
  history          String?
  exam             String?
  diagnosis        String?
  plan             String?
  followUp         DateTime?
  attachments      String?
  scribeJson       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  consents         Consent[]
  deviceLogs       DeviceLog[]
  labOrders        LabOrder[]
  newInvoices      NewInvoice[]
  prescription     Prescription?
  appointment      Appointment?      @relation(fields: [appointmentId], references: [id])
  doctor           User              @relation(fields: [doctorId], references: [id])
  patient          Patient           @relation(fields: [patientId], references: [id])
  visitAttachments VisitAttachment[]

  @@index([patientId])
  @@index([doctorId])
  @@index([createdAt])
  @@index([appointmentId])
  @@index([followUp])
  @@map("visits")
}

// Dermatology photo capture positions
enum PhotoPosition {
  FRONT
  LEFT_PROFILE
  RIGHT_PROFILE
  BACK
  CLOSE_UP
  OTHER
}

// Binary attachments stored in the database for visits
model VisitAttachment {
  id          String   @id @default(cuid())
  visitId     String
  filename    String
  contentType String
  sizeBytes   Int
  data        Bytes
  createdAt   DateTime @default(now())
  position    PhotoPosition @default(OTHER)
  displayOrder Int          @default(0)

  visit Visit @relation(fields: [visitId], references: [id])

  @@index([visitId])
  @@map("visit_attachments")
}

// Draft photos linked to patient and date (pre-visit)
model DraftAttachment {
  id          String   @id @default(cuid())
  patientId   String
  dateStr     String // yyyymmdd for grouping
  filename    String
  contentType String
  sizeBytes   Int
  data        Bytes
  createdAt   DateTime @default(now())
  position    PhotoPosition @default(OTHER)
  displayOrder Int          @default(0)

  patient Patient @relation(fields: [patientId], references: [id])

  @@index([patientId, dateStr])
  @@map("draft_attachments")
}

model Prescription {
  id               String                   @id @default(cuid())
  visitId          String                   @unique
  language         Language                 @default(EN)
  items            String
  instructions     String?
  genericFirst     Boolean                  @default(true)
  pharmacistNotes  String?
  qrcode           String?
  signature        String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  visit            Visit                    @relation(fields: [visitId], references: [id])
  pharmacyInvoices PharmacyInvoice[]
  // Print/Share tracking
  printEvents      PrescriptionPrintEvent[]

  // Back-relations
  templateUsages TemplateUsage[]

  @@map("prescriptions")
}

// Template Library for Prescriptions
model PrescriptionTemplate {
  id          String   @id @default(cuid())
  branchId    String
  createdBy   String
  name        String
  description String?
  category    String?
  specialty   String?
  isPublic    Boolean  @default(false)
  // Default/current content for quick usage (JSON string of items/sections)
  items       String // JSON
  metadata    String? // JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch   Branch                        @relation(fields: [branchId], references: [id])
  creator  User                          @relation(fields: [createdBy], references: [id])
  versions PrescriptionTemplateVersion[]
  usages   TemplateUsage[]
  variants LayoutVariant[]

  @@index([branchId])
  @@index([createdBy])
  @@map("prescription_templates")
}

enum TemplateApprovalStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

model PrescriptionTemplateVersion {
  id            String                 @id @default(cuid())
  templateId    String
  versionNumber Int
  language      Language               @default(EN)
  content       String // JSON full template content
  changeNotes   String?
  status        TemplateApprovalStatus @default(DRAFT)
  submittedAt   DateTime?
  approvedAt    DateTime?
  approvedBy    String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  // Relations
  template  PrescriptionTemplate      @relation(fields: [templateId], references: [id])
  approver  User?                     @relation(fields: [approvedBy], references: [id])
  approvals TemplateVersionApproval[]

  @@unique([templateId, versionNumber])
  @@index([status])
  @@map("prescription_template_versions")
}

model TemplateVersionApproval {
  id         String                 @id @default(cuid())
  versionId  String
  reviewerId String
  status     TemplateApprovalStatus
  note       String?
  createdAt  DateTime               @default(now())

  version  PrescriptionTemplateVersion @relation(fields: [versionId], references: [id])
  reviewer User                        @relation(fields: [reviewerId], references: [id])

  @@index([versionId])
  @@index([reviewerId])
  @@map("template_version_approvals")
}

// Asset library for printouts (logos, stamps, signatures)
enum AssetType {
  LOGO
  STAMP
  SIGNATURE
}

model ClinicAsset {
  id          String    @id @default(cuid())
  branchId    String
  ownerId     String?
  type        AssetType
  name        String
  // original file stored in visit attachments or external URL
  url         String
  // Transform controls
  opacity     Float     @default(1)
  scale       Float     @default(1)
  rotationDeg Float     @default(0)
  crop        String? // JSON {x,y,width,height} in pixels
  placement   String? // JSON {x,y,position}
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  branch Branch @relation(fields: [branchId], references: [id])
  owner  User?  @relation(fields: [ownerId], references: [id])

  @@index([branchId])
  @@index([ownerId])
  @@index([type])
  @@map("clinic_assets")
}

// Printer calibration and saved profiles
model PrinterProfile {
  id               String   @id @default(cuid())
  branchId         String
  ownerId          String?
  name             String
  paperPreset      String   @default("A4") // A4, LETTER
  topMarginPx      Int      @default(150)
  leftMarginPx     Int      @default(45)
  rightMarginPx    Int      @default(45)
  bottomMarginPx   Int      @default(45)
  contentOffsetXPx Int      @default(0)
  contentOffsetYPx Int      @default(0)
  grayscale        Boolean  @default(false)
  bleedSafeMm      Int      @default(0)
  metadata         String? // JSON for calibration wizard steps
  isDefault        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  branch Branch @relation(fields: [branchId], references: [id])
  owner  User?  @relation(fields: [ownerId], references: [id])

  @@index([branchId])
  @@index([ownerId])
  @@map("printer_profiles")
}

// Track each print/share event for prescriptions
model PrescriptionPrintEvent {
  id             String   @id @default(cuid())
  prescriptionId String
  eventType      String // PRINT, PDF_DOWNLOAD, EMAIL_SHARE, WHATSAPP_SHARE
  channel        String? // printer name or medium
  count          Int      @default(1)
  metadata       String? // JSON (alignment feedback, wizard data)
  createdAt      DateTime @default(now())

  prescription Prescription @relation(fields: [prescriptionId], references: [id])

  @@index([prescriptionId])
  @@index([eventType])
  @@map("prescription_print_events")
}

// Analytics: record template usage
model TemplateUsage {
  id             String   @id @default(cuid())
  templateId     String
  branchId       String
  doctorId       String?
  prescriptionId String?
  variant        String? // variant key if part of A/B
  alignmentDx    String? // JSON of alignment feedback
  createdAt      DateTime @default(now())

  template     PrescriptionTemplate @relation(fields: [templateId], references: [id])
  branch       Branch               @relation(fields: [branchId], references: [id])
  doctor       User?                @relation(fields: [doctorId], references: [id])
  prescription Prescription?        @relation(fields: [prescriptionId], references: [id])

  @@index([templateId])
  @@index([branchId])
  @@index([doctorId])
  @@map("template_usages")
}

// A/B testing for layouts
enum VariantType {
  CONTROL
  VARIANT
}

model LayoutExperiment {
  id          String   @id @default(cuid())
  branchId    String
  key         String
  name        String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  branch      Branch                 @relation(fields: [branchId], references: [id])
  variants    LayoutVariant[]
  assignments ExperimentAssignment[]

  @@unique([branchId, key])
  @@map("layout_experiments")
}

model LayoutVariant {
  id           String      @id @default(cuid())
  experimentId String
  key          String
  type         VariantType @default(VARIANT)
  weight       Int         @default(1)
  templateId   String?
  createdAt    DateTime    @default(now())

  experiment           LayoutExperiment       @relation(fields: [experimentId], references: [id])
  template             PrescriptionTemplate?  @relation(fields: [templateId], references: [id])
  ExperimentAssignment ExperimentAssignment[]

  @@unique([experimentId, key])
  @@map("layout_variants")
}

model ExperimentAssignment {
  id           String   @id @default(cuid())
  experimentId String
  doctorId     String?
  patientId    String?
  variantId    String
  createdAt    DateTime @default(now())

  experiment LayoutExperiment @relation(fields: [experimentId], references: [id])
  doctor     User?            @relation(fields: [doctorId], references: [id])
  patient    Patient?         @relation(fields: [patientId], references: [id])
  variant    LayoutVariant    @relation(fields: [variantId], references: [id])

  @@index([experimentId])
  @@index([doctorId])
  @@index([patientId])
  @@map("experiment_assignments")
}

// Translation memory for per-field translations
model TranslationMemoryEntry {
  id             String   @id @default(cuid())
  branchId       String
  fieldKey       String // e.g., prescription.instructions
  sourceText     String
  targetLanguage Language
  targetText     String
  confidence     Float    @default(0)
  usageCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  branch Branch @relation(fields: [branchId], references: [id])

  @@unique([branchId, fieldKey, sourceText, targetLanguage])
  @@index([branchId])
  @@index([fieldKey])
  @@index([targetLanguage])
  @@map("translation_memory_entries")
}

model Service {
  id              String           @id @default(cuid())
  name            String
  type            String
  taxable         Boolean          @default(false)
  gstRate         Float            @default(0)
  priceMrp        Float
  priceNet        Float
  deviceId        String?
  branchId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invoiceItems    InvoiceItem[]
  newInvoiceItems NewInvoiceItem[]
  branch          Branch           @relation(fields: [branchId], references: [id])

  @@map("services")
}

model Invoice {
  id            String        @id @default(cuid())
  patientId     String
  visitId       String?
  mode          PaymentMode   @default(CASH)
  gstBreakup    String?
  exemptBreakup String?
  total         Float
  received      Float         @default(0)
  balance       Float
  invoiceNo     String        @unique
  gstin         String?
  hsn           String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         InvoiceItem[]
  patient       Patient       @relation(fields: [patientId], references: [id])
  payments      Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  serviceId String
  qty       Int     @default(1)
  unitPrice Float
  gstRate   Float   @default(0)
  total     Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("invoice_items")
}

model NewInvoice {
  id             String           @id @default(cuid())
  invoiceNo      String           @unique
  patientId      String
  visitId        String?
  appointmentId  String?
  branchId       String
  total          Float
  balance        Float
  discount       Float            @default(0)
  discountReason String?
  notes          String?
  dueDate        DateTime?
  metadata       String?
  mode           String?
  gstin          String?
  hsn            String?
  status         String           @default("DRAFT")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  received       Float            @default(0)
  items          NewInvoiceItem[]
  appointment    Appointment?     @relation(fields: [appointmentId], references: [id])
  branch         Branch           @relation(fields: [branchId], references: [id])
  patient        Patient          @relation(fields: [patientId], references: [id])
  visit          Visit?           @relation(fields: [visitId], references: [id])
  payments       NewPayment[]

  @@map("new_invoices")
}

model NewInvoiceItem {
  id          String     @id @default(cuid())
  invoiceId   String
  serviceId   String
  name        String
  description String?
  qty         Int        @default(1)
  unitPrice   Float
  discount    Float      @default(0)
  gstRate     Float      @default(0)
  total       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  invoice     NewInvoice @relation(fields: [invoiceId], references: [id])
  service     Service    @relation(fields: [serviceId], references: [id])

  @@map("new_invoice_items")
}

model NewPayment {
  id          String      @id @default(cuid())
  invoiceId   String
  amount      Float
  mode        PaymentMode
  reference   String?
  gateway     String?
  reconStatus String      @default("PENDING")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  invoice     NewInvoice  @relation(fields: [invoiceId], references: [id])

  @@map("new_payments")
}

model Payment {
  id          String      @id @default(cuid())
  invoiceId   String
  amount      Float
  mode        PaymentMode
  reference   String?
  gateway     String?
  reconStatus String      @default("PENDING")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  invoice     Invoice     @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model DeviceLog {
  id          String   @id @default(cuid())
  patientId   String
  visitId     String
  deviceModel String
  serialNo    String
  parameters  String
  operatorId  String
  photoRefs   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  operator    User     @relation(fields: [operatorId], references: [id])
  patient     Patient  @relation(fields: [patientId], references: [id])
  visit       Visit    @relation(fields: [visitId], references: [id])

  @@map("device_logs")
}

model LabOrder {
  id         String   @id @default(cuid())
  patientId  String
  visitId    String
  tests      String
  partner    String
  status     String   @default("ORDERED")
  resultsRef String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  patient    Patient  @relation(fields: [patientId], references: [id])
  visit      Visit    @relation(fields: [visitId], references: [id])

  @@map("lab_orders")
}

model Consent {
  id          String      @id @default(cuid())
  patientId   String
  visitId     String?
  consentType ConsentType
  language    Language    @default(EN)
  text        String
  signedAt    DateTime?
  signer      String?
  method      String?
  pdfUrl      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  patient     Patient     @relation(fields: [patientId], references: [id])
  visit       Visit?      @relation(fields: [visitId], references: [id])

  @@map("consents")
}

model Referral {
  id               String   @id @default(cuid())
  patientId        String
  source           String
  commissionScheme String?
  payoutStatus     String   @default("PENDING")
  amount           Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  patient          Patient  @relation(fields: [patientId], references: [id])

  @@map("referrals")
}

model InventoryItem {
  id                   String             @id @default(cuid())
  branchId             String
  name                 String
  description          String?
  genericName          String?
  brandName            String?
  type                 InventoryItemType
  category             String?
  subCategory          String?
  manufacturer         String?
  supplier             String?
  barcode              String?            @unique
  sku                  String?            @unique
  costPrice            Float
  sellingPrice         Float
  mrp                  Float?
  unit                 UnitType
  packSize             Int?
  packUnit             String?
  currentStock         Int                @default(0)
  minStockLevel        Int?
  maxStockLevel        Int?
  reorderLevel         Int?
  reorderQuantity      Int?
  expiryDate           DateTime?
  batchNumber          String?
  hsnCode              String?
  gstRate              Float?
  requiresPrescription Boolean            @default(false)
  isControlled         Boolean            @default(false)
  storageLocation      String?
  storageConditions    String?
  tags                 String?
  status               InventoryStatus    @default(ACTIVE)
  stockStatus          StockStatus        @default(OUT_OF_STOCK)
  metadata             String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  inventoryAudits      InventoryAudit[]
  branch               Branch             @relation(fields: [branchId], references: [id])
  reorderRules         ReorderRule[]
  stockAdjustments     StockAdjustment[]
  stockMovements       StockMovement[]
  transactions         StockTransaction[]
  drugs                Drug[]

  @@map("inventory_items")
}

model StockTransaction {
  id          String          @id @default(cuid())
  branchId    String
  itemId      String
  userId      String
  type        TransactionType
  quantity    Int
  unitPrice   Float
  totalAmount Float
  reference   String?
  notes       String?
  batchNumber String?
  expiryDate  DateTime?
  supplier    String?
  customer    String?
  reason      String?
  location    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  item        InventoryItem   @relation(fields: [itemId], references: [id])
  user        User            @relation(fields: [userId], references: [id])

  @@map("stock_transactions")
}

model PurchaseOrder {
  id                   String              @id @default(cuid())
  branchId             String
  userId               String
  supplier             String
  orderDate            DateTime            @default(now())
  expectedDeliveryDate DateTime?
  status               PurchaseOrderStatus @default(DRAFT)
  items                String
  totalAmount          Float
  notes                String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  branch               Branch              @relation(fields: [branchId], references: [id])
  user                 User                @relation(fields: [userId], references: [id])

  @@map("purchase_orders")
}

model Supplier {
  id            String   @id @default(cuid())
  branchId      String
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  pincode       String?
  gstNumber     String?
  panNumber     String?
  bankDetails   String?
  paymentTerms  String?
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  branch        Branch   @relation(fields: [branchId], references: [id])

  @@map("suppliers")
}

model StockAdjustment {
  id        String              @id @default(cuid())
  branchId  String
  itemId    String
  userId    String
  type      StockAdjustmentType
  quantity  Int
  reason    String?
  notes     String?
  metadata  String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  branch    Branch              @relation(fields: [branchId], references: [id])
  item      InventoryItem       @relation(fields: [itemId], references: [id])
  user      User                @relation(fields: [userId], references: [id])

  @@map("stock_adjustments")
}

model StockMovement {
  id           String            @id @default(cuid())
  branchId     String
  itemId       String
  userId       String
  type         StockMovementType
  quantity     Int
  fromLocation String?
  toLocation   String?
  reason       String?
  notes        String?
  metadata     String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  branch       Branch            @relation(fields: [branchId], references: [id])
  item         InventoryItem     @relation(fields: [itemId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model ReorderRule {
  id              String        @id @default(cuid())
  branchId        String
  itemId          String
  userId          String
  reorderLevel    Int
  reorderQuantity Int
  isActive        Boolean       @default(true)
  metadata        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  branch          Branch        @relation(fields: [branchId], references: [id])
  item            InventoryItem @relation(fields: [itemId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("reorder_rules")
}

model InventoryAudit {
  id            String        @id @default(cuid())
  branchId      String
  itemId        String
  auditorId     String
  auditDate     DateTime      @default(now())
  physicalStock Int
  systemStock   Int
  variance      Int
  notes         String?
  status        String        @default("PENDING")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  auditor       User          @relation(fields: [auditorId], references: [id])
  item          InventoryItem @relation(fields: [itemId], references: [id])

  @@map("inventory_audits")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  oldValues String?
  newValues String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

// Drug Database Model
model Drug {
  id                String   @id @default(cuid())
  name              String
  price             Float
  isDiscontinued    Boolean  @default(false)
  manufacturerName  String
  type              String   @default("allopathy")
  packSizeLabel     String
  composition1      String?
  composition2      String?
  barcode           String?  @unique
  sku               String?  @unique
  category          String?
  description       String?
  dosageForm        String?
  strength          String?
  storageConditions String?
  expiryMonths      Int?     @default(24)
  minStockLevel     Int?     @default(10)
  maxStockLevel     Int?     @default(1000)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  branchId          String

  // Relations
  branch         Branch                @relation(fields: [branchId], references: [id])
  invoiceItems   PharmacyInvoiceItem[]
  inventoryItems InventoryItem[]
  packageItems   PharmacyPackageItem[]

  @@index([name])
  @@index([manufacturerName])
  @@index([type])
  @@index([branchId])
  @@index([isActive])
  @@index([isDiscontinued])
  @@map("drugs")
}

// Pharmacy Invoice Model
model PharmacyInvoice {
  id             String  @id @default(cuid())
  invoiceNumber  String  @unique
  patientId      String
  doctorId       String?
  prescriptionId String?
  branchId       String

  // Invoice Details
  subtotal       Float
  discountAmount Float @default(0)
  taxAmount      Float @default(0)
  totalAmount    Float

  // Payment Details
  paymentMethod PharmacyPaymentMethod
  paymentStatus PharmacyPaymentStatus @default(PENDING)
  paidAmount    Float                 @default(0)
  balanceAmount Float                 @default(0)

  // Billing Address
  billingName    String
  billingPhone   String
  billingAddress String?
  billingCity    String?
  billingState   String?
  billingPincode String?

  // Invoice Status
  status PharmacyInvoiceStatus @default(DRAFT)
  notes  String?

  // Timestamps
  invoiceDate     DateTime  @default(now())
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  mutationVersion Int       @default(0)

  // Relations
  patient      Patient               @relation(fields: [patientId], references: [id])
  doctor       User?                 @relation("PharmacyInvoiceDoctor", fields: [doctorId], references: [id])
  prescription Prescription?         @relation(fields: [prescriptionId], references: [id])
  branch       Branch                @relation(fields: [branchId], references: [id])
  items        PharmacyInvoiceItem[]
  payments     PharmacyPayment[]

  @@index([patientId])
  @@index([doctorId])
  @@index([branchId])
  @@index([status])
  @@index([paymentStatus])
  @@index([invoiceDate])
  @@index([createdAt])
  @@map("pharmacy_invoices")
}

// Pharmacy Invoice Items
model PharmacyInvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  drugId    String? // Made optional for package items
  packageId String? // New field for package reference

  // Item Details
  quantity        Int
  unitPrice       Float
  discountPercent Float @default(0)
  discountAmount  Float @default(0)
  taxPercent      Float @default(0)
  taxAmount       Float @default(0)
  totalAmount     Float

  // Item Type
  itemType PharmacyItemType @default(DRUG) // New enum

  // Dosage Instructions
  dosage       String?
  frequency    String?
  duration     String?
  instructions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoice PharmacyInvoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  drug    Drug?            @relation(fields: [drugId], references: [id])
  package PharmacyPackage? @relation(fields: [packageId], references: [id])

  @@index([invoiceId])
  @@index([drugId])
  @@index([packageId])
  @@index([itemType])
  @@map("pharmacy_invoice_items")
}

// Pharmacy Payments
model PharmacyPayment {
  id        String @id @default(cuid())
  invoiceId String

  // Payment Details
  amount    Float
  method    PharmacyPaymentMethod
  reference String?
  gateway   String?
  status    PharmacyPaymentStatus @default(PENDING)

  // Timestamps
  paymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoice PharmacyInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([status])
  @@index([paymentDate])
  @@index([createdAt])
  @@map("pharmacy_payments")
}

// Enums for Pharmacy System
enum PharmacyInvoiceStatus {
  DRAFT
  PENDING
  CONFIRMED
  DISPENSED
  COMPLETED
  CANCELLED
}

enum PharmacyPaymentMethod {
  CASH
  CARD
  UPI
  NETBANKING
  WALLET
  INSURANCE
}

enum PharmacyPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_PAID
}

enum UserRole {
  OWNER
  ADMIN
  DOCTOR
  NURSE
  RECEPTION
  ACCOUNTANT
  PHARMACIST
  LAB_TECH
  MANAGER
  PATIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum VisitType {
  OPD
  TELEMED
  PROCEDURE
}

enum PaymentMode {
  CASH
  CARD
  UPI
  BNPL
}

enum ConsentType {
  GENERAL_CARE
  PROCEDURE_SPECIFIC
  TELEMED
  DATA_PROCESSING
}

enum Language {
  EN
  TE
  HI
}

enum InventoryItemType {
  MEDICINE
  EQUIPMENT
  SUPPLY
  CONSUMABLE
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum TransactionType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  TRANSFER
  EXPIRED
  DAMAGED
}

enum UnitType {
  PIECES
  BOXES
  BOTTLES
  STRIPS
  TUBES
  VIALS
  AMPOULES
  SYRINGES
  PACKS
  KITS
}

enum StockAdjustmentType {
  PHYSICAL_COUNT
  DAMAGE
  EXPIRY
  THEFT
  TRANSFER
  CORRECTION
}

enum StockMovementType {
  IN
  OUT
  TRANSFER
  ADJUSTMENT
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  CANCELLED
}

// Pharmacy Package Model (for dermatology treatment combos)
model PharmacyPackage {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String  @default("Dermatology")
  subcategory String? // e.g., "Acne Treatment", "Anti-aging", "Hair Care"

  // Pricing
  originalPrice   Float // Sum of individual drug prices
  packagePrice    Float // Discounted package price
  discountPercent Float @default(0)

  // Package Details
  duration          String? // e.g., "4 weeks", "3 months"
  instructions      String? // Usage instructions for the combo
  indications       String? // What conditions this package treats
  contraindications String? // When not to use

  // Creator & Status
  createdBy String? // Doctor who created this package
  isActive  Boolean @default(true)
  isPublic  Boolean @default(false) // If false, only creator can use
  branchId  String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator      User?                 @relation("PharmacyPackageCreator", fields: [createdBy], references: [id])
  branch       Branch                @relation(fields: [branchId], references: [id])
  items        PharmacyPackageItem[]
  invoiceItems PharmacyInvoiceItem[]

  @@index([branchId])
  @@index([category])
  @@index([subcategory])
  @@index([createdBy])
  @@index([isActive])
  @@index([isPublic])
  @@map("pharmacy_packages")
}

// Pharmacy Package Items (drugs included in a package)
model PharmacyPackageItem {
  id        String @id @default(cuid())
  packageId String
  drugId    String

  // Item Details
  quantity     Int
  dosage       String? // e.g., "Apply twice daily"
  frequency    String? // e.g., "Morning and Evening"
  duration     String? // e.g., "Use for 4 weeks"
  instructions String? // Special instructions for this drug in the combo
  sequence     Int     @default(0) // Order of application/usage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  package PharmacyPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  drug    Drug            @relation(fields: [drugId], references: [id])

  @@index([packageId])
  @@index([drugId])
  @@map("pharmacy_package_items")
}

// Add new enum for pharmacy item types
enum PharmacyItemType {
  DRUG
  PACKAGE
}

// Stock Prediction Model for ML-based inventory forecasting
model StockPrediction {
  id                  String   @id @default(cuid())
  branchId            String
  drugId              String
  predictionDate      DateTime @default(now())
  predictedQuantity   Int
  currentStock        Int
  averageMonthlyUsage Float
  trend               Float    @default(0)
  confidence          String // HIGH, MEDIUM, LOW, COLD_START
  method              String // TIME_SERIES, SIMILAR_ITEMS, CATEGORY_AVERAGE, MANUAL_RULE
  daysUntilStockout   Int?
  historicalData      Json?
  reasoning           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([branchId])
  @@index([drugId])
  @@index([predictionDate])
  @@index([confidence])
  @@index([branchId, predictionDate])
  @@map("stock_predictions")
}

// WhatsApp Templates for outbound messages at various touchpoints
model WhatsAppTemplate {
  id          String   @id @default(cuid())
  branchId    String
  ownerId     String? // null => branch-level template managed by admin
  name        String
  touchpoint  String // e.g., appointment_confirmation, invoice_share, prescription_share
  language    String? // e.g., en, en_US, hi
  contentHtml String? // WYSIWYG HTML (stored as-is)
  contentText String // Fallback plain text (WhatsApp text messages)
  variables   String? // JSON array of variable keys used
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner  User?  @relation(fields: [ownerId], references: [id])
  branch Branch @relation(fields: [branchId], references: [id])

  @@index([branchId])
  @@index([ownerId])
  @@index([touchpoint])
  @@map("whatsapp_templates")
}

// Centralized atomic sequence storage for numbering (e.g., invoices)
model NumberSequence {
  id         String   @id @default(cuid())
  type       String
  branchId   String
  periodKey  String?
  lastNumber Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([type, branchId, periodKey])
  @@map("number_sequences")
}
